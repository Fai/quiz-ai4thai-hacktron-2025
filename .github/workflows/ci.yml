name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --all-features --workspace

    - name: Security audit
      run: |
        cargo install cargo-audit
        cargo audit

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build API1 image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./api1/Dockerfile
        push: false
        tags: time-service-api1:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build API2 image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./api2/Dockerfile
        push: false
        tags: time-service-api2:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4

    - name: Run integration tests
      run: |
        docker-compose up -d
        sleep 30

        # Test health endpoints
        curl -f http://localhost:3000/health
        curl -f http://localhost:4000/health

        # Test time endpoints
        curl -f "http://localhost:3000/time"
        curl -f "http://localhost:3000/time?timezone=EST"

        docker-compose down

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
